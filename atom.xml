<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fox Home</title>
  
  <subtitle>清疚</subtitle>
  <link href="https://foolishfox.cn/atom.xml" rel="self"/>
  
  <link href="https://foolishfox.cn/"/>
  <updated>2020-12-17T01:44:32.477Z</updated>
  <id>https://foolishfox.cn/</id>
  
  <author>
    <name>liuyihui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从WordPress搬迁|使用Hexo搭建博客</title>
    <link href="https://foolishfox.cn/posts/202012-heog.html"/>
    <id>https://foolishfox.cn/posts/202012-heog.html</id>
    <published>2020-12-16T13:49:02.000Z</published>
    <updated>2020-12-17T01:44:32.477Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>      <p>  之前使用了很久的WordPress，用起来很方便，但是也有一些不令我满意的地方。首先，WordPress的源在国外，更新起来很慢很不方便，只好在服务器上面搭建了一个梯子。其次，WordPress的后端加载速度实在是太慢了，有点无法忍受。而且WordPress写文章感觉也没有直接写<code>markdown</code>方便。所以，哪怕WordPress还是有很多的优点，但我还是决定放弃WordPress。</p><blockquote><p>我知道有很多方法可以优化WordPress的加载速度，帮助更新，但是很麻烦不说，也不能从根本解决</p></blockquote><a id="more"></a><p>  然后在偶然的机会下，接触到了<span class="exturl"><a class="exturl__link"   href="https://hexo.io/zh-cn/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，看了一些示例文档，觉得不错，所以打算试一试，于是<strong>首先创建了一个ECS快照</strong>，防止操作失误数据丢失。然后趁此机会把服务器换回了我最常用的<code>Ubuntu</code>，安装了<code>Hexo</code>，按照教程进行之前数据的迁移和本身、主题等的配置，最终决定就用<code>Hexo</code>来搭建新博客。</p><blockquote><p>我在后面接触到了<code>Hugo</code>等其他静态博客的项目，感觉都不错，但是和<code>Hexo</code>相比没有碾压式的优越，所以也没有纠结，就继续采用<code>Hexo</code></p></blockquote>        <h2 id="安装路线"   >          <a href="#安装路线" class="heading-link"><i class="fas fa-link"></i></a>安装路线</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2020/12/hexoblog.png"  alt="流程" />      </p>        <h2 id="安装nodejs"   >          <a href="#安装nodejs" class="heading-link"><i class="fas fa-link"></i></a>安装Node.js</h2>      <p>  在安装<code>Hexo</code>之前需要安装好<code>node.js</code>。<code>Windows</code>可以直接在<span class="exturl"><a class="exturl__link"   href="https://nodejs.org/zh-cn/" >官方网站</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>下载安装包，在安装的时候要记住<strong>加入环境变量</strong>中。<code>Linux</code>用户可以从<span class="exturl"><a class="exturl__link"   href="https://github.com/nodesource/distributions" >NodeSource</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>安装。</p><blockquote><p><code>node.js</code>是基于<code>Chrome V8</code>引擎的<code>Javascript</code>运行环境，可以帮助我们在本地直接运行<code>Javascript</code>而不需要借助浏览器。</p></blockquote><p>  我在我的<code>Ubuntu</code>服务器上安装的时候，下载速度简直无法忍受，只好去安装了一个命令行版本的科学上网工具：<span class="exturl"><a class="exturl__link"   href="https://github.com/TyrantLucifer/ssr-command-client" >ssr-command-client</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。所以推荐<code>Linux</code>用户使用下载二进制文件的方式进行安装。</p><blockquote><p>在<span class="exturl"><a class="exturl__link"   href="https://nodejs.org/en/download/" >官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>下载对应的二进制文件，可以在服务器使用<code>wget</code>的方式，也可以下载到本地，然后通过<code>FTP</code>工具上传。</p></blockquote><blockquote><p>下载得到的是一个<code>*.tar.xz</code>文件，使用<code>tar -xvf *.tar.zx</code>进行安装，假设安装目录为<code>/usr/local/nodejs/</code>，然后添加环境变量，可以使用软链接：<code>ln -s /usr/local/nodejs/bin/node /usr/local/bin/node</code>，最后检查一下是否安装成功：</p></blockquote><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@qjlyh:/usr/<span class="built_in">local</span>/nodejs<span class="comment"># node -v</span></span><br><span class="line">v14.15.1</span><br><span class="line">root@qjlyh:/usr/<span class="built_in">local</span>/nodejs<span class="comment"># npm -v</span></span><br><span class="line">6.14.8</span><br></pre></td></tr></table></div></figure>        <h2 id="安装git"   >          <a href="#安装git" class="heading-link"><i class="fas fa-link"></i></a>安装Git</h2>      <p>  直接下载安装包安装即可，依然注意<strong>环境变量</strong>的问题。<code>Linux</code>基本都自带了<code>git</code>，不用安装。所以关于<code>Git</code>的安装就不过多赘述。</p>        <h2 id="安装hexo"   >          <a href="#安装hexo" class="heading-link"><i class="fas fa-link"></i></a>安装Hexo</h2>      <p>  直接按照<code>Hexo</code>官网的<span class="exturl"><a class="exturl__link"   href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo" >介绍</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>安装即可：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></div></figure><p>  注意之后的操作一般都是在<code>Hexo</code>的<strong>初始化目录（或者项目根目录）下进行的</strong>。如果执行失败，可以通过以下命令更改环境变量：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br></pre></td></tr></table></div></figure>        <h2 id="初始化"   >          <a href="#初始化" class="heading-link"><i class="fas fa-link"></i></a>初始化</h2>      <p>  使用下面的命令初始化你的项目文件夹，并且进入文件夹安装<code>package.json</code>中的包：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></div></figure><p>  安装完成之后，项目的文件结构如下图：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">project folder</span><br><span class="line">├── _config.yml   配置文件</span><br><span class="line">├── package.json  应用程序信息</span><br><span class="line">├── scaffolds     模板文件</span><br><span class="line">├── source        源代码</span><br><span class="line">│   ├── _drafts   草稿</span><br><span class="line">│   └── _posts    文章</span><br><span class="line">└── themes        主题</span><br></pre></td></tr></table></div></figure>        <h2 id="写博客"   >          <a href="#写博客" class="heading-link"><i class="fas fa-link"></i></a>写博客</h2>      <p>  <code>Hexo</code>本体支持<code>.md</code>和<code>.ejs</code>两种格式的文件，但是只要安装了对应的渲染器插件，例如<code>Hexo-renderer-pug</code>，就可以使用<code>.pug</code>格式进行写作。<br />  <code>scaffolds</code>文件夹以及各个主题的<code>layout</code>文件夹下，是各种页面的模板。<code>Hexo</code>自带了3个模板，都是<code>Markdown</code>格式的，分别对应草稿、文章和页面，生成新文件的命令是：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></div></figure><p>  <code>layout</code>是可选参数，代表生成什么类型（草稿、文章或者页面），默认<code>_config.yml</code>中的<code>default_layout</code>参数；<code>title</code>是文件名，生成之后<br />  <strong>官方网站有很详细的说明！多读官方文档！！！</strong></p>        <h2 id="生成"   >          <a href="#生成" class="heading-link"><i class="fas fa-link"></i></a>生成</h2>      <p>  我们写的博文源码都是<code>.md</code>或者<code>.ejs</code>一类的文件，然后通过<code>Hexo</code>按照主题的配置生成<code>html</code>、<code>css</code>和<code>js</code>文件，使用的命令如下：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo clean 可以清楚缓存（删除/public目录下所有内容）</span></span><br><span class="line">hexo generate</span><br><span class="line">hexo g</span><br></pre></td></tr></table></div></figure><p>  该命令会在根目录下生成<code>public</code>文件夹，该文件夹存储的就是网站所需要的文件了</p><blockquote><p>草稿很类似于所谓的私密文章，只有自己能够看到。如果想要将草稿发布，有两种办法：一种是直接将草稿从<code>_drafts</code>目录下移动到<code>_posts</code>目录，或者是使用<code>hexo publish [layout] &lt;title&gt;</code>的方式</p></blockquote>        <h2 id="预览"   >          <a href="#预览" class="heading-link"><i class="fas fa-link"></i></a>预览</h2>      <p>  <code>Hexo</code>可以通过内置的<code>server</code>来预览生成的网站的效果：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server --drafts</span><br><span class="line">hexo s</span><br></pre></td></tr></table></div></figure><p>  默认情况下不会显示草稿，–drafts参数可以强制显示草稿，或者是更改根目录下<code>_config.yml</code>的配置项：<code>render_drafts: true</code></p>        <h2 id="部署"   >          <a href="#部署" class="heading-link"><i class="fas fa-link"></i></a>部署</h2>      <p>  最后一步就是将你创作的内容发布，一般是通过这一个步骤将静态文件（也就是<code>public</code>文件夹）推送到<code>GitHub</code>的一个仓库中，生成<code>Github Pages</code>，首先要更改根目录下<code>_config.yml</code>的配置：</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br></pre></td></tr></table></div></figure><p>  然后安装<code>hexo-deployer-git</code>插件，再执行下面的命令，就可以把<code>public</code>文件夹整体提交到<code>GitHub</code>的仓库中了：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">hexo d</span><br></pre></td></tr></table></div></figure>        <h2 id="qa"   >          <a href="#qa" class="heading-link"><i class="fas fa-link"></i></a>Q&amp;A</h2>      <ul><li>为什么我不在本地搭建<code>node.js</code>环境，使用<code>Github Pages</code>搭建网站？</li></ul><blockquote><p>首先是因为我不想在自己的电脑上安装太多的东西；其次是我通过阿里云的学生优惠，购买了一台ECS，尽管配置不高，但是应付我这个小站肯定是可以的，所以我想把它利用上。所以最终我才用的方案是：本机<code>VS Code</code>远程连接服务器进行写作，在服务器上进行部署，同时推送源码到<code>GitHub</code>仓库备份（强烈吹一波<code>VS Code</code>）</p></blockquote><ul><li>在本机(<code>Windows</code>)安装这些东西太麻烦，有没有什么简便的方法？</li></ul><blockquote><p>答案肯定是有的，可以使用<code>Chocolate</code>或者<code>Scoop</code>进行安装，强烈推荐这种方法，可以很方便的管理这些应用，不用担心把你的C盘搞得一团糟。后面会讲一讲我使用<code>Scoop</code>的经历</p></blockquote>        <h2 id="参考资料"   >          <a href="#参考资料" class="heading-link"><i class="fas fa-link"></i></a>参考资料</h2>      <ul><li><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/itaffy/article/details/89455342" >阿里云ECS服务器上安装nodejs</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://ccknbc.github.io/posts/hexo-toss/#%E5%AE%89%E8%A3%85-Node-js" >HEXO 折腾</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://hexo.io/zh-cn/docs/" >Hexo中文文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;   &gt;
          &lt;a href=&quot;#前言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;前言&lt;/h2&gt;
      
&lt;p&gt;  之前使用了很久的WordPress，用起来很方便，但是也有一些不令我满意的地方。首先，WordPress的源在国外，更新起来很慢很不方便，只好在服务器上面搭建了一个梯子。其次，WordPress的后端加载速度实在是太慢了，有点无法忍受。而且WordPress写文章感觉也没有直接写&lt;code&gt;markdown&lt;/code&gt;方便。所以，哪怕WordPress还是有很多的优点，但我还是决定放弃WordPress。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我知道有很多方法可以优化WordPress的加载速度，帮助更新，但是很麻烦不说，也不能从根本解决&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://foolishfox.cn/categories/Hexo/"/>
    
    
    <category term="blog" scheme="https://foolishfox.cn/tags/blog/"/>
    
    <category term="教程" scheme="https://foolishfox.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="github" scheme="https://foolishfox.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>利用python通过百度和必应API主动推送收录</title>
    <link href="https://foolishfox.cn/posts/202012-a.html"/>
    <id>https://foolishfox.cn/posts/202012-a.html</id>
    <published>2020-12-15T06:19:32.000Z</published>
    <updated>2020-12-19T13:41:14.891Z</updated>
    
    <content type="html"><![CDATA[<p>  自己写了博客，一般总是希望被更多的人看到，而他人找到你的网站的最好方法就是通过搜索引擎。所以为了能够让你的网站被收录在搜索引擎中，需要向搜索引擎主动提交(当然，如果你是dl，大可不必如此麻烦)</p><a id="more"></a><p>  如果你是通过<code>Hexo</code>建立的网站，有很多的插件可以提供你使用，例如<span class="exturl"><a class="exturl__link"   href="https://github.com/cjh0613/hexo-submit-urls-to-search-engine" >hexo-submit-urls-to-search-engine</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，配置可以看插件的<span class="exturl"><a class="exturl__link"   href="https://cjh0613.com/20200603HexoSubmitUrlsToSearchEngine.html" >文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>  但是在使用这个插件的时候，我遇到了一个问题：怎么保存我的密钥。文档中说可以通过环境变量保存，然后搜索发现<code>yaml</code>文件可以使用<code>$&#123;var&#125;</code>的方式来引用变量，不过始终没有成果，个人怀疑是因为没有使用所谓的<code>CI</code>环境，所以只好自己用<code>Python</code>写了一个自动提交的程序</p>        <h2 id="流程"   >          <a href="#流程" class="heading-link"><i class="fas fa-link"></i></a>流程</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2020/12/pushurl.png"  alt="流程" />      <br />  目前国内主要的搜索引擎就是百度，必应和谷歌，<s>如果需要主动推送谷歌的话，需要会科学上网，再加上个人觉得没什么必要，所以只添加了前两个的push</s><br />  2020.12.19:谷歌可以自动抓取，没必要主动推送</p>        <h2 id="依赖"   >          <a href="#依赖" class="heading-link"><i class="fas fa-link"></i></a>依赖</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re, os, urllib, requests</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom</span><br><span class="line"><span class="keyword">from</span> xml.dom.minidom <span class="keyword">import</span> parse</span><br></pre></td></tr></table></div></figure><p>  一般情况下，只要安装<code>BeautifulSoup</code>就好了</p>        <h2 id="收录情况"   >          <a href="#收录情况" class="heading-link"><i class="fas fa-link"></i></a>收录情况</h2>      <p>  在搜索引擎中输入<code>site:example.com</code>就可以查看你的网站的收录情况，这里使用百度来获得网站的收录情况：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data      = requests.get(<span class="string">&#x27;http://www.baidu.com/s?wd=site:&#x27;</span>+url)</span><br><span class="line">content   = data.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">soup      = BeautifulSoup(content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">link_list = soup.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></div></figure><p>  这部分实现的是查询收录情况，并且获取页面中所有的链接</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">site_list = []</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> link_list :</span><br><span class="line">    url = link.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    rul = re.<span class="built_in">compile</span>(<span class="string">r&#x27;http://www.baidu.com/link\?url=+.+&#x27;</span>)</span><br><span class="line">    url = rul.findall(url)</span><br></pre></td></tr></table></div></figure><p>  这部分是将无关的链接全部排除；百度的搜索结果都是以<code>http://www.baidu.com/link/?url=</code>进行替换的，而我们要获得的是真实网址，所以下一步要通过访问这个链接，获取真实指向的网址：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(url[<span class="number">0</span>])</span><br><span class="line">    realurl  = response.geturl()</span><br><span class="line">    <span class="keyword">if</span> realurl!=<span class="string">&#x27;&#x27;</span> :</span><br><span class="line">        site_list.append(realurl)</span><br><span class="line"><span class="keyword">except</span> request.HTTPError <span class="keyword">as</span> e :</span><br><span class="line">    print(e.code, e.reason)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e :</span><br><span class="line">    data = requests.get(url[<span class="number">0</span>])</span><br></pre></td></tr></table></div></figure><p>  <code>urllib.error.URLError</code>是为了防止有时候DNS解析不到某些域名的网址，导致程序直接退出</p>        <h2 id="站点链接"   >          <a href="#站点链接" class="heading-link"><i class="fas fa-link"></i></a>站点链接</h2>      <p>  可以通过很多手段获得站点地图。以我的网站为例，使用<code>hexo-generator-sitemap</code>直接获得了<code>sitemap.xml</code>文件</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DOMTree   = xml.dom.minidom.parse(path)</span><br><span class="line">sizemap   = DOMTree.getElementsByTagName(<span class="string">&#x27;loc&#x27;</span>)</span><br><span class="line">site_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(sizemap), <span class="number">1</span>):</span><br><span class="line">    url = sizemap[i].firstChild.data</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;tags&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url <span class="keyword">and</span> <span class="string">&#x27;categories&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url :</span><br><span class="line">        site_list.append(url)</span><br><span class="line"><span class="keyword">return</span> site_list</span><br></pre></td></tr></table></div></figure>        <h2 id="百度提交"   >          <a href="#百度提交" class="heading-link"><i class="fas fa-link"></i></a>百度提交</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s_url = <span class="string">&#x27;http://data.zz.baidu.com/urls?site=https://foolishfox.cn&amp;token=&#x27;</span>+os.environ[<span class="string">&#x27;baidu_token&#x27;</span>]</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span> : <span class="string">&#x27;text/plain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>   : <span class="string">&#x27;curl/7.12.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>         : <span class="string">&#x27;data.zz.baidu.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">url_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> url_list :</span><br><span class="line">    url_string += link+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">response = requests.request(<span class="string">&#x27;POST&#x27;</span>, url=s_url, data=url_string, headers=headers)</span><br><span class="line"><span class="keyword">return</span> response.text</span><br></pre></td></tr></table></div></figure><p>  百度API的<code>token</code>我已经提前设置在了环境变量中，可以避免对外公开。需要注意的是，<strong>百度API的格式要求是字符串</strong>，所以我将<code>list</code>拼接成了<code>string</code></p>        <h2 id="必应提交"   >          <a href="#必应提交" class="heading-link"><i class="fas fa-link"></i></a>必应提交</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s_url = <span class="string">&#x27;https://ssl.bing.com/webmaster/api.svc/json/SubmitUrlbatch?apikey=&#x27;</span>+os.environ[<span class="string">&#x27;bing_token&#x27;</span>]</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span> : <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>   : <span class="string">&#x27;curl/7.12.1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">url_json = &#123;</span><br><span class="line">    <span class="string">&#x27;siteUrl&#x27;</span>: <span class="string">&#x27;https://foolishfox.cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;urlList&#x27;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> url_list :</span><br><span class="line">    url_json[<span class="string">&#x27;url&#x27;</span>].append(link)</span><br><span class="line">response = requests.request(<span class="string">&#x27;POST&#x27;</span>, url=s_url, json=url_json, headers=headers)</span><br><span class="line"><span class="keyword">return</span> response.text</span><br></pre></td></tr></table></div></figure><p>  必应可以采用<code>xml</code>和<code>json</code>两种格式提交，我用的是后者。如果提交单个链接，应该将<code>s_url</code>修改为<code>https://ssl.bing.com/webmaster/api.svc/json/SubmitUrl?apikey=</code>，将<code>json</code>中的<code>urlList</code>修改为<code>url</code></p>        <h2 id="自动提交"   >          <a href="#自动提交" class="heading-link"><i class="fas fa-link"></i></a>自动提交</h2>      <p>  最简单的方式就是通过<code>crontab</code>了，如果使用<code>Hexo</code>，还可以用<code>node.js</code>监听<code>hexo</code>事件，实现提交：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">hexo.on(&#39;deployAfter&#39;, function() &#123;</span><br><span class="line">run();</span><br><span class="line">&#125;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">console.log(&quot;Error: &quot; + e.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="更新"   >          <a href="#更新" class="heading-link"><i class="fas fa-link"></i></a>更新</h2>      <ul><li>2020.12.19: 修改代码中链接、流程和部分单词拼写错误</li></ul>        <h2 id="源码下载"   >          <a href="#源码下载" class="heading-link"><i class="fas fa-link"></i></a>源码下载</h2>      <p>  完整的源码<span class="exturl"><a class="exturl__link"   href="https://api.foolishfox.cn/file/down/pushurl.py" >点击这里下载</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="参考资料"   >          <a href="#参考资料" class="heading-link"><i class="fas fa-link"></i></a>参考资料</h2>      <ul><li><span class="exturl"><a class="exturl__link"   href="https://cjh0613.com/20200602pythonBingUrlPush.html" >python主动推送链接至必应Bing平台</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;  自己写了博客，一般总是希望被更多的人看到，而他人找到你的网站的最好方法就是通过搜索引擎。所以为了能够让你的网站被收录在搜索引擎中，需要向搜索引擎主动提交(当然，如果你是dl，大可不必如此麻烦)&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://foolishfox.cn/categories/Python/"/>
    
    
    <category term="收录" scheme="https://foolishfox.cn/tags/%E6%94%B6%E5%BD%95/"/>
    
    <category term="API" scheme="https://foolishfox.cn/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>星座与节气</title>
    <link href="https://foolishfox.cn/posts/202009-a.html"/>
    <id>https://foolishfox.cn/posts/202009-a.html</id>
    <published>2020-09-30T15:33:03.000Z</published>
    <updated>2020-12-15T15:58:56.040Z</updated>
    
    <content type="html"><![CDATA[<p>  昨天天文协会在进行路边天文的时候，THTV的记者们采访了我们的新任会长，其中问到了一个是否相信星座的问题，让我想起了很久以前看到的一个东西，直接上表。</p><a id="more"></a><div class="table-container"><table><thead><tr><th style="text-align:center">白羊座</th><th style="text-align:center">金牛座</th><th style="text-align:center">双子座</th><th style="text-align:center">巨蟹座</th><th style="text-align:center">狮子座</th><th style="text-align:center">处女座</th></tr></thead><tbody><tr><td style="text-align:center">3.21~4.19</td><td style="text-align:center">4.20~5.20</td><td style="text-align:center">5.21~6.21</td><td style="text-align:center">6.22~7.22</td><td style="text-align:center">7.23~8.22</td><td style="text-align:center">8.23~9.22</td></tr><tr><td style="text-align:center">天秤座</td><td style="text-align:center">天蝎座</td><td style="text-align:center">射手座</td><td style="text-align:center">摩羯座</td><td style="text-align:center">水瓶座</td><td style="text-align:center">双鱼座</td></tr><tr><td style="text-align:center">9.23~10.23</td><td style="text-align:center">10.24~11.22</td><td style="text-align:center">11.23~12.21</td><td style="text-align:center">12.22~1.19</td><td style="text-align:center">1.20~2.18</td><td style="text-align:center">2.18~3.20</td></tr></tbody></table></div><p>  然后我们看看二十四节气的情况:<br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2020/12/13/24%E8%8A%82%E6%B0%94-1.png"  alt="" />      <br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2020/12/13/24%E8%8A%82%E6%B0%94-2.png"  alt="" />      <br />  如果我们把每个星座的首尾和中间日期拿出来(总共得到24个日期),会发现和二十四节气惊人得吻合,不得不感叹古人还真是聪明啊,哪怕地处东西两半球,却通过不同的形式表达了一套历法.<br />  PS:很久没有发文了,纯粹彰显一下存在感</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;  昨天天文协会在进行路边天文的时候，THTV的记者们采访了我们的新任会长，其中问到了一个是否相信星座的问题，让我想起了很久以前看到的一个东西，直接上表。&lt;/p&gt;</summary>
    
    
    
    <category term="天文" scheme="https://foolishfox.cn/categories/%E5%A4%A9%E6%96%87/"/>
    
    
    <category term="科普" scheme="https://foolishfox.cn/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
</feed>
