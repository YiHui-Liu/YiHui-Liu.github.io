<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fox Home</title>
  
  <subtitle>清疚</subtitle>
  <link href="https://foolishfox.cn/atom.xml" rel="self"/>
  
  <link href="https://foolishfox.cn/"/>
  <updated>2021-02-27T05:08:15.368Z</updated>
  <id>https://foolishfox.cn/</id>
  
  <author>
    <name>liuyihui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AE9/AP9介绍与安装</title>
    <link href="https://foolishfox.cn/posts/202102-ae9-1.html"/>
    <id>https://foolishfox.cn/posts/202102-ae9-1.html</id>
    <published>2021-02-26T16:40:14.000Z</published>
    <updated>2021-02-27T05:08:15.368Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>      <p>  <code>AE9/AP9/SPM</code>是由美国空军研究实验室(Air Force Research Laboratory)开发的，用于模拟近地空间辐射的模型。<code>AE9/AP9/SPM</code>分别用于模拟高能电子，高能质子和等离子体模型，给定卫星轨道根数或星历表，该模型将返回指定量的通量，注量或剂量，并为这些量选择适合的统计数据。<code>AE9/AP9/SPM</code>提供了两种安装模式：命令行版本和GUI版本。在国际合作者加入该项目之后，该模型被重命名为近地国际辐射环境(IRENE)。</p><a id="more"></a>        <h2 id="下载"   >          <a href="#下载" class="heading-link"><i class="fas fa-link"></i></a>下载</h2>      <p>  <code>AE9/AP9/SPM</code>的项目地址位于<span class="exturl"><a class="exturl__link"   href="https://www.vdl.afrl.af.mil/programs/ae9ap9/" >VDL</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，该网站需要使用美国IP才可进行访问。我们选择使用<code>Public AE9AP9 Account</code>进行下载，而不使用<code>VDL Account</code>，因为后者需要年满18周岁的美国政府雇员，承包商或学术人员才能够申请注册。</p><p>  在填写<code>Public AE9AP9 Account</code>注册信息时，注意邮箱不能使用国内邮箱或者hotmail、yahoo，Zip Code填写为00000即可。注册完成之后，密码将会通过注册邮箱发送给你，由于不可知的原因你很有可能无法收到邮件，你可以向<code>ae9ap9@vdl.afrl.af.mil</code>发送邮件进行询问，在得到回复之后选择重置密码即可。<br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2021/02/email_compressed.jpg"  alt="" />      </p><p>  <code>AE9/AP9/SPM</code>默认只提供Windows版本，源代码或者Linux版本需要发邮件索求之后自行编译。</p>        <h2 id="第三方依赖"   >          <a href="#第三方依赖" class="heading-link"><i class="fas fa-link"></i></a>第三方依赖</h2>          <div class="note-plugin warning">      <span class="note-plugin__icon note-plugin__icon--warning">              <i class="fas fa-exclamation-circle"></i>            </span>      <p><strong>Warning</strong><br />只有编译源代码才需要安装依赖，否则直接使用即可!</p>    </div>          <h3 id="cmake"   >          <a href="#cmake" class="heading-link"><i class="fas fa-link"></i></a>CMake</h3>      <p>  <code>CMake</code>版本不低于2.6，推荐选择下载Binary distributions，源代码需要编译才能使用。</p>        <h3 id="visual-studio-2012"   >          <a href="#visual-studio-2012" class="heading-link"><i class="fas fa-link"></i></a>Visual Studio 2012</h3>      <p>  下载旧版本的<code>Visual Studio 2012</code>或者2008。</p>    <div class="note-plugin info">      <span class="note-plugin__icon note-plugin__icon--info">              <i class="fas fa-info-circle"></i>            </span>      <p><strong>Tip</strong><br />A Windows-based FORTRAN compiler is also needed for a full source code compilation, but unfortunately, is not freely available. However, by default, the build process links to an included pre-compiled library of these FORTRAN-based routines.</p>    </div>          <h3 id="python-recommended"   >          <a href="#python-recommended" class="heading-link"><i class="fas fa-link"></i></a>Python (Recommended)</h3>      <p>  推荐下载<code>Miniconda</code>，并且更改源：</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></div></figure>        <h3 id="qt-and-qwt-optional"   >          <a href="#qt-and-qwt-optional" class="heading-link"><i class="fas fa-link"></i></a>Qt and Qwt (optional)</h3>      <p>  QTW是QT的一个第三方库，两者都可以直接下载安装。</p>        <h3 id="hdf5-188"   >          <a href="#hdf5-188" class="heading-link"><i class="fas fa-link"></i></a>HDF5 1.8.8</h3>      <p>  HDF的全程是<code>Hierarchical Data Format</code>，可以存储不同类型的图像和数码数据的文件格式，文件后缀名为<code>.hdf</code>，下载二进制版本安装即可。</p>        <h3 id="boost-1580"   >          <a href="#boost-1580" class="heading-link"><i class="fas fa-link"></i></a>Boost 1.58.0</h3>      <p>  Boost是为C++标准库提供扩展的程序库，下载解压后目录如图所示，依照参考资料5安装即可。<br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2021/02/boost_compressed.jpg"  alt="" />      </p>        <h2 id="解压"   >          <a href="#解压" class="heading-link"><i class="fas fa-link"></i></a>解压</h2>      <p>  下载得到的是一个压缩文件，解压后目录结构为：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Ae9Ap9</span><br><span class="line">  bin</span><br><span class="line">    win32 - 预编译32位二进制文件(Windows XP&#x2F;7)</span><br><span class="line">    win64 - 预编译64位二进制文件(Windows 7)</span><br><span class="line">  documents - 发行说明, 用户指南, 编译指南, 版权说明等</span><br><span class="line">  modelData - 模型数据文件</span><br><span class="line">  samples   - 模型样例</span><br><span class="line">  unitTests - 模型的拓展数据集</span><br><span class="line">  source    - 源代码根目录构建脚本(基础发行版中不存在源代码)</span><br><span class="line">    Ae9Ap9Mpi      - Ae9Ap9 源代码</span><br><span class="line">    SpWx_Ae9Ap9    - Ae9Ap9 所依赖的空间天气模型的源代码</span><br><span class="line">    Ae9Ap9GuiMpi   - GUI 应用源代码</span><br><span class="line">    buildAe9Ap9.py - Python 脚本, 用于linux, win32和win64平台的自动构建</span><br></pre></td></tr></table></div></figure>        <h2 id="编译"   >          <a href="#编译" class="heading-link"><i class="fas fa-link"></i></a>编译</h2>          <div class="note-plugin warning">      <span class="note-plugin__icon note-plugin__icon--warning">              <i class="fas fa-exclamation-circle"></i>            </span>      <p><strong>Warning</strong><br />只有源代码才需要编译，否则直接使用即可!</p>    </div>  <ol><li>Taking note of the include and library paths for the third-party dependencies installed in the previous step, using a plain text editor, update these in the three build script configuration files:<ul><li>Ae9Ap9/source/SpWx_Ae9Ap9/Common/internal_utils.cmake<br />The configuration file contains several platform-specific sections of commands that set these paths.</li></ul> <figure class="highlight cmake"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scroll down in the <span class="keyword">file</span> to where these lines are showing:</span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line"><span class="comment"># config_include_lib_paths</span></span><br><span class="line">From here, all settings that may require modification are preceded with this line:</span><br><span class="line"><span class="comment"># &lt;&lt;== END-USER MODIFIABLE ==&gt;&gt;</span></span><br></pre></td></tr></table></div></figure>     <div class="note-plugin info">      <span class="note-plugin__icon note-plugin__icon--info">              <i class="fas fa-info-circle"></i>            </span>      <p><strong>Tip</strong><br />For Windows, use forward slashes (<code>/</code>) in path references.Note the <code>set</code> of the EXT_LIBS_ROOT variable, and its subsequent reference $(EXT_LIBS_ROOT), for ease of use in multiple places. For Windows, it is suggested to set EXT_LIBS_ROOT to <code>C:/Program Files</code>.</p>    </div>  <ul><li>Ae9Ap9/source/Ae9Ap9Mpi/internal_utils.cmake<br />This file is updated in the same way as the previous file, if the GUI application is desired.</li><li>Ae9Ap9/source/Ae9Ap9GuiMpi/trunk/Ae9Ap9Gui.pro<br />The Ae9Ap9Gui source tree utilizes <code>qmake</code> (part of the Qt development environment) for the build process, and thus uses a slightly different file and syntax for defining the include and library paths. Important: on Linux systems, verify that the correct <code>qmake</code> version is being used; update the <code>path</code> environment variable as necessary.<br />The Qt include and library paths will be automatically set properly with the installation of the Qt software. This file must only explicitly set paths for the Qwt include and library paths, as shown below. Note the platform-specific sections are also present here.</li></ul> <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">win32 &#123;</span><br><span class="line">  INCLUDEPATH +&#x3D; c:\Qt\qwt-5.2.1\src</span><br><span class="line">  LIBS +&#x3D; &quot;c:\Qt\qwt-5.2.1\lib\libqwt5.a&quot;</span><br><span class="line">&#125;</span><br><span class="line">win64 &#123;</span><br><span class="line">  INCLUDEPATH +&#x3D; c:\Qt64\qwt-5.2.1\src</span><br><span class="line">  LIBS +&#x3D; &quot;c:\Qt64\qwt-5.2.1\lib\libqwt5.a&quot;</span><br><span class="line">&#125;</span><br><span class="line">unix &#123;</span><br><span class="line">  INCLUDEPATH +&#x3D; &#x2F;nas&#x2F;ExternalLibs&#x2F;Qt&#x2F;qwt-5.2&#x2F;src</span><br><span class="line">  LIBS +&#x3D; &#x2F;nas&#x2F;ExternalLibs&#x2F;Qt&#x2F;qwt-5.2&#x2F;lib&#x2F;libqwt.so</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li>Automated Build<br />The preferred method of building a source distribution of IRENE (AE9/AP9/SPM) on a supported platform is to utilize the python script called <span class="exturl"><a class="exturl__link"   href="http://buildAe9Ap9.py" >buildAe9Ap9.py</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>, located in the Ae9Ap9/source directory of the distribution. This script will build the model library and the command-line and gui driver applications, then place them in a platform-specific subdirectory under Ae9Ap9/bin in the distribution.<br />During the build process, the script will generate a log file called buildAe9Ap9.log in the Ae9Ap9/source directory; this can be used to identify any build errors encountered. At a command prompt in the <code>Ae9Ap9/source</code> directory, invoke the python build script, specifying the operating system name and, if needed, the mode (defaults to <code>release</code>): python <span class="exturl"><a class="exturl__link"   href="http://buildAe9Ap9.py" >buildAe9Ap9.py</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> --os=&lt;platform_name&gt; [ --mode=<type> ] [ --nompi ] [ --nogui ] where &lt;platform_name&gt; can be linux , win32 or win64, and <type> can be release or debug.<br />By default, both the single- and multi-threaded versions of the programs are built, unless the optional argument <code>--nompi</code> (required for win32 builds) is specified. The GUI application is also built by default; to skip this, specify the optional argument <code>--nogui</code>. For RedHat EL or CentOS 5.x installations only, the --gcc=gcc44 option should also be included.</li></ol>    <div class="note-plugin warning">      <span class="note-plugin__icon note-plugin__icon--warning">              <i class="fas fa-exclamation-circle"></i>            </span>      <p><strong>Warning</strong><br /><code>debug</code> mode increases program execution time by a factor of 10 to 20.</p>    </div>          <h2 id="下载地址"   >          <a href="#下载地址" class="heading-link"><i class="fas fa-link"></i></a>下载地址</h2>      <div class="table-container"><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Version</th><th style="text-align:center">URL</th></tr></thead><tbody><tr><td style="text-align:center">AE9/AP9/SPM</td><td style="text-align:center">1.50.1</td><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://www.vdl.afrl.af.mil/programs/ae9ap9/downloads.php" >https://www.vdl.afrl.af.mil/programs/ae9ap9/downloads.php</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td style="text-align:center">CMake</td><td style="text-align:center">≥2.6</td><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://cmake.org/download/" >https://cmake.org/download/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td style="text-align:center">Visual Studio</td><td style="text-align:center">2008 or 2012</td><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://visualstudio.microsoft.com/zh-hans/vs/older-downloads/" >https://visualstudio.microsoft.com/zh-hans/vs/older-downloads/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td style="text-align:center">Miniconda</td><td style="text-align:center"></td><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" >https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td style="text-align:center">Qt</td><td style="text-align:center">4.6.2</td><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://download.qt.io/archive/qt/4.6/" >https://download.qt.io/archive/qt/4.6/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td style="text-align:center">QtW</td><td style="text-align:center">5.2.1</td><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://sourceforge.net/projects/qwt/files/qwt/5.2.1/" >https://sourceforge.net/projects/qwt/files/qwt/5.2.1/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td style="text-align:center">HDF5</td><td style="text-align:center">1.8.8</td><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.8/" >https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.8/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td style="text-align:center">Boost</td><td style="text-align:center">1.58.0</td><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://sourceforge.net/projects/boost/files/boost/1.58.0/" >https://sourceforge.net/projects/boost/files/boost/1.58.0/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr></tbody></table></div>        <h2 id="参考资料"   >          <a href="#参考资料" class="heading-link"><i class="fas fa-link"></i></a>参考资料</h2>      <ol><li><span class="exturl"><a class="exturl__link"   href="https://www.vdl.afrl.af.mil/programs/ae9ap9/" >AE9/AP9/SPM</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/weixin_40011728/article/details/77924614" >QT第三方库：Qwt的安装与使用</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/maweifei/article/details/80961541" >Windows下HDF5静态库的封装与测试</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/bf2fd1752f7f" >在windows平台使用CMAKE安装HDF5</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/bxbjk/article/details/100760154" >Windows环境下Boost的安装</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;   &gt;
          &lt;a href=&quot;#前言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;前言&lt;/h2&gt;
      
&lt;p&gt;  &lt;code&gt;AE9/AP9/SPM&lt;/code&gt;是由美国空军研究实验室(Air Force Research Laboratory)开发的，用于模拟近地空间辐射的模型。&lt;code&gt;AE9/AP9/SPM&lt;/code&gt;分别用于模拟高能电子，高能质子和等离子体模型，给定卫星轨道根数或星历表，该模型将返回指定量的通量，注量或剂量，并为这些量选择适合的统计数据。&lt;code&gt;AE9/AP9/SPM&lt;/code&gt;提供了两种安装模式：命令行版本和GUI版本。在国际合作者加入该项目之后，该模型被重命名为近地国际辐射环境(IRENE)。&lt;/p&gt;</summary>
    
    
    
    <category term="AE9/AP9" scheme="https://foolishfox.cn/categories/AE9-AP9/"/>
    
    
    <category term="科普" scheme="https://foolishfox.cn/tags/%E7%A7%91%E6%99%AE/"/>
    
    <category term="安装" scheme="https://foolishfox.cn/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>安装MTProxy，轻松使用Telegram</title>
    <link href="https://foolishfox.cn/posts/202102-mtproxy.html"/>
    <id>https://foolishfox.cn/posts/202102-mtproxy.html</id>
    <published>2021-02-24T12:44:40.000Z</published>
    <updated>2021-02-25T10:50:34.068Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>      <p>  Telegram是一款类似于QQ和微信的即时通讯软件，中文名叫电报。Telegram最大的特点，也是主打的招牌就是加密与安全：除了服务器本身加密外，还可以额外用户对用户加密，还支持设置阅后即焚，保证通信隐私安全。目前最新版本的客户端支持发送所有类型的文件和进行语音通话。</p><a id="more"></a><p>  不过正是由于Telegram的加密特性，导致不少地区都对Telegram进行封杀，必须使用特殊手段才能使用Telegram，基于此类问题，电报官方开发了一款专门用于Telegram的代理工具——MTProxy。</p><p>  MTProxy特别适合主要通过手机使用Telegram的用户，电脑一般一直开启科学上网工具，但手机不同，所以使用MTProxy可以让手机更方便地使用Telegram。</p>        <h2 id="手动安装"   >          <a href="#手动安装" class="heading-link"><i class="fas fa-link"></i></a>手动安装</h2>              <h3 id="准备"   >          <a href="#准备" class="heading-link"><i class="fas fa-link"></i></a>准备</h3>      <p>  在安装之前，需要确认你的服务器上拥有一些基本工具：<code>openssl</code>、<code>zlib</code>、<code>gcc</code>等。</p>        <h3 id="build"   >          <a href="#build" class="heading-link"><i class="fas fa-link"></i></a>Build</h3>      <ol><li>拉取源码</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/TelegramMessenger/MTProxy</span><br></pre></td></tr></table></div></figure><ol start="2"><li>编译，生成的二进制文件是objs/bin/mtproto-proxy</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> MTProxy</span><br><span class="line">make &amp;&amp; <span class="built_in">cd</span> objs/bin</span><br></pre></td></tr></table></div></figure>        <h3 id="config"   >          <a href="#config" class="heading-link"><i class="fas fa-link"></i></a>Config</h3>      <ol start="3"><li>连接Telegram服务器，并获取配置文件</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://core.telegram.org/getProxySecret -o proxy-secret</span><br><span class="line">curl -s https://core.telegram.org/getProxyConfig -o proxy-multi.conf</span><br></pre></td></tr></table></div></figure><ol start="4"><li>生成密钥，一定要<strong>记得记录下来</strong></li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -c 16 /dev/urandom | xxd -ps</span><br></pre></td></tr></table></div></figure><ol start="5"><li>创建systemd服务文件，并且填充内容</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/systemd/system/MTProxy.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=MTProxy</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/opt/MTProxy</span><br><span class="line">ExecStart=/opt/MTProxy/mtproto-proxy -u <span class="variable">$username</span> -p <span class="variable">$localport</span> -H <span class="variable">$connectport</span> -S <span class="variable">$secret</span> --aes-pwd proxy-secret proxy-multi.conf -M <span class="variable">$num</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">含义</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">username</td><td style="text-align:center">用户名</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">localport</td><td style="text-align:center">统计端口</td><td style="text-align:center">wget localhost:8888/stats</td></tr><tr><td style="text-align:center">connectport</td><td style="text-align:center">连接端口</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">secret</td><td style="text-align:center">密钥</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">num</td><td style="text-align:center">进程数目</td><td style="text-align:center">默认为1即可</td></tr></tbody></table></div>        <h3 id="run"   >          <a href="#run" class="heading-link"><i class="fas fa-link"></i></a>Run</h3>      <ol start="6"><li>重新加载进程守护（daemons）</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl start MTProxy.service     <span class="comment"># 启动MTProxy</span></span><br><span class="line">systemctl stop MTProxy.service      <span class="comment"># 停止MTProxy</span></span><br><span class="line">systemctl restart MTProxy.service   <span class="comment"># 重启MTProxy</span></span><br><span class="line">systemctl status MTProxy.service    <span class="comment"># 查看状态</span></span><br><span class="line">systemctl <span class="built_in">enable</span> MTProxy.service    <span class="comment"># 允许开机自启</span></span><br></pre></td></tr></table></div></figure><ol start="7"><li>获取链接：<code>tg://proxy?server=SERVER_IP/SERVER_DOMAIN&amp;port=PORT&amp;secret=SECRET</code>，将其发送至任一tg聊天窗口，点击添加链接即可</li></ol>        <h3 id="mtproxy-admin-bot"   >          <a href="#mtproxy-admin-bot" class="heading-link"><i class="fas fa-link"></i></a>MTProxy Admin Bot</h3>      <p>  MTProxy Admin Bot是Telegram官方帮助使用代理的工具，搜索添加后，通过<code>/newproxy</code>命令生成代理链接：<br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2021/02/proxy-min.gif"  alt="" />      </p>        <h2 id="脚本安装tls伪装"   >          <a href="#脚本安装tls伪装" class="heading-link"><i class="fas fa-link"></i></a>脚本安装+TLS伪装</h2>      <p>  上面的安装过程略显繁琐，容易出错，而且更重要的问题是这样安装的代理使用的流量特征十分明显，特别容易被GFW识别，导致服务器端口甚至IP被封，最好使用其他方法进行伪装，所以可以使用一键安装脚本，例如<span class="exturl"><a class="exturl__link"   href="https://github.com/sunpma/mtp" >MTProxy TLS</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>或者<span class="exturl"><a class="exturl__link"   href="https://github.com/ellermister/mtproxy" >mtproxy</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，安装过程与上面类似，使用方法在Github主页中有描述：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash mtproxy.sh start</span><br><span class="line">bash mtproxy.sh debug</span><br><span class="line">bash mtproxy.sh stop</span><br><span class="line">bash mtproxy.sh restart</span><br></pre></td></tr></table></div></figure>        <h2 id="qa"   >          <a href="#qa" class="heading-link"><i class="fas fa-link"></i></a>Q&amp;A</h2>      <ol><li>脚本安装之后无法启动<br />  可以使用<code>bash mtproxy.sh debug</code>命令查看问题，一般问题都是类似这样：<br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2021/02/vultr-min-plus.png"  alt="" />      <br />  这是因为脚本下载的mtproto-proxy版本太老了，可以看到是用gcc-8编译的去年的老版本，可能和你的电脑不匹配，我的解决方案是：<ol><li>下载原版：git clone <span class="exturl"><a class="exturl__link"   href="https://github.com/TelegramMessenger/MTProxy" >https://github.com/TelegramMessenger/MTProxy</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>使用服务器上的gcc进行编译，将编译产生的mtproto-proxy二进制文件复制到一键管理脚本所在目录下，再次启动</li><li>有可能出现无法运行的情况，可以将原版代码中common/pid.c中的这一行注释掉，重新编译，重复上面的步骤：</li></ol> <figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert (!(p &amp; <span class="number">0xffff0000</span>));</span><br></pre></td></tr></table></div></figure></li></ol>        <h2 id="参考资料"   >          <a href="#参考资料" class="heading-link"><i class="fas fa-link"></i></a>参考资料</h2>      <ol><li><span class="exturl"><a class="exturl__link"   href="https://github.com/TelegramMessenger/MTProxy" >MTProxy</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/sunpma/mtp" >MTProxy TLS 绿色版一键安装脚本</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/ellermister/mtproxy" >mtproxy</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://www.zxar520.com/linux/1439.html" >MTProxy+FakeTLS|Telegram稳定代理配置教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" >Systemd 入门教程：命令篇</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;   &gt;
          &lt;a href=&quot;#前言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;前言&lt;/h2&gt;
      
&lt;p&gt;  Telegram是一款类似于QQ和微信的即时通讯软件，中文名叫电报。Telegram最大的特点，也是主打的招牌就是加密与安全：除了服务器本身加密外，还可以额外用户对用户加密，还支持设置阅后即焚，保证通信隐私安全。目前最新版本的客户端支持发送所有类型的文件和进行语音通话。&lt;/p&gt;</summary>
    
    
    
    
    <category term="安装" scheme="https://foolishfox.cn/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Windows | 包管理器Scoop的安装与使用</title>
    <link href="https://foolishfox.cn/posts/202101-a.html"/>
    <id>https://foolishfox.cn/posts/202101-a.html</id>
    <published>2021-01-25T15:46:56.000Z</published>
    <updated>2021-02-27T05:07:55.699Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></div></figure><p>  在<code>Ubuntu</code>安装软件的时候敲入上面的命令是一件令人舒适的事情，而且也很便捷，想要在<code>MacOS</code>上这样操作，也可以使用<code>homebrew</code>等诸多的包管理工具。然而如果想在<code>Windows</code>安装软件，你<strong>可能</strong>需要：</p><ol><li>打开百度搜索软件</li><li>在搜索结果中找到无毒无捆绑的版本</li><li>进行安装，不停点击<code>Next</code>或者下一步</li><li>结束安装</li></ol><a id="more"></a><p>  在这个过程中，你还要担心是否会混入病毒，是否会有捆绑软件同时下载；软件还很可能会索要管理员权限，把它自己安装在C盘的好位置；有些开发工具还可能会搞乱你的环境变量；最最重要的是，最后你要卸载它的时候不知道有多麻烦。</p><p>  所以就有天降猛男来解决这个问题，开发了<code>Windows</code>的包管理工具。在<code>scoop</code>之前，<code>Windows</code>上的包管理工具中比较出名的是<code>Chocolaty</code>。在<code>scoop</code>横空出世之后，由于其自定义程度高、拓展性强的特性而发展迅猛，目前社区中总计有2000+的软件；另外<code>scoop</code>安装软件不依赖管理员权限，安装路径和环境变量管理也深得我这一类“绿色用户”的欢心。</p>        <h2 id="安装scoop"   >          <a href="#安装scoop" class="heading-link"><i class="fas fa-link"></i></a>安装scoop</h2>              <h3 id="安装要求"   >          <a href="#安装要求" class="heading-link"><i class="fas fa-link"></i></a>安装要求</h3>      <ul><li>Windows 7或更高版本</li><li>PowerShell 5.0或更高版本</li><li>.NET Framework 4.5或更高版本</li><li>User Name不含中文字符</li><li>确认打开了远程安装权限</li></ul><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$PSVersionTable</span>.PSVersion.Major                      <span class="comment"># 查看Powershell版本</span></span><br><span class="line"><span class="variable">$PSVersionTable</span>.CLRVersion.Major                     <span class="comment"># 查看.NET Framework版本</span></span><br><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned <span class="literal">-scope</span> currentuser  <span class="comment"># 打开远程权限</span></span><br></pre></td></tr></table></div></figure><p>  当然还有很重要的一点就是能够正常访问<code>Github</code>。</p>        <h3 id="配置"   >          <a href="#配置" class="heading-link"><i class="fas fa-link"></i></a>配置</h3>      <p>  默认情况下,scoop以及大多数安装的软件都位于<code>%USERPROFILE%\scoop</code>,全局安装的程序位于<code>C:\ProgramData\scoop</code>，当然我们也可以自定义安装位置：</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:scoop</span>=<span class="string">&#x27;D:\scoop&#x27;</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;scoop&#x27;</span>, <span class="variable">$env:scoop</span>, <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$env:scoop_GLOBAL</span>=<span class="string">&#x27;D:\scoop\GlobalApps&#x27;</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;scoop_GLOBAL&#x27;</span>, <span class="variable">$env:scoop_GLOBAL</span>, <span class="string">&#x27;Machine&#x27;</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="安装"   >          <a href="#安装" class="heading-link"><i class="fas fa-link"></i></a>安装</h3>      <figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br><span class="line"><span class="comment"># or the shorter:</span></span><br><span class="line"><span class="built_in">iwr</span> <span class="literal">-useb</span> get.scoop.sh | <span class="built_in">iex</span></span><br></pre></td></tr></table></div></figure>        <h3 id="卸载"   >          <a href="#卸载" class="heading-link"><i class="fas fa-link"></i></a>卸载</h3>      <p>  以毒攻毒，以<code>scoop</code>卸载<code>scoop</code>(先卸载其他软件)：</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop uninstall scoop</span><br></pre></td></tr></table></div></figure>        <h2 id="基础"   >          <a href="#基础" class="heading-link"><i class="fas fa-link"></i></a>基础</h2>              <h3 id="常用命令"   >          <a href="#常用命令" class="heading-link"><i class="fas fa-link"></i></a>常用命令</h3>      <p>  <code>scoop</code>的命令设计逻辑是<code>scoop + command + [object] + [options]</code>，例如<code>scoop install git -g</code>，常用的基础命令有：</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">help <command></td><td style="text-align:center">查看帮助</td></tr><tr><td style="text-align:center">bucket add/rm [args]</td><td style="text-align:center">添加、删除仓库</td></tr><tr><td style="text-align:center">bucket list/know</td><td style="text-align:center">查看已有/已知仓库</td></tr><tr><td style="text-align:center">search <appname></td><td style="text-align:center">匹配查找</td></tr><tr><td style="text-align:center">info <app></td><td style="text-align:center">查看详情</td></tr><tr><td style="text-align:center">home <app></td><td style="text-align:center">查看主页</td></tr><tr><td style="text-align:center">install <app> [options]</td><td style="text-align:center">安装</td></tr><tr><td style="text-align:center">uninstall <app> [options]</td><td style="text-align:center">卸载</td></tr><tr><td style="text-align:center">update <app> [options]</td><td style="text-align:center">更新</td></tr><tr><td style="text-align:center">list</td><td style="text-align:center">查看已安装软件</td></tr><tr><td style="text-align:center">cache show/rm [app]</td><td style="text-align:center">查看或删除缓存</td></tr><tr><td style="text-align:center">cleanup <app> [options]</td><td style="text-align:center">删除旧版本</td></tr><tr><td style="text-align:center">checkup</td><td style="text-align:center">自检查</td></tr></tbody></table></div><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2021/01/command-1-min.gif"  alt="" />      <br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2021/01/command-2-min.gif"  alt="" />      <br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2021/01/command-3-min.gif"  alt="" />      </p>        <h3 id="安装位置"   >          <a href="#安装位置" class="heading-link"><i class="fas fa-link"></i></a>安装位置</h3>      <p>  在<a href="#%E9%85%8D%E7%BD%AE">配置</a>这一步中，我们设置了<code>scoop</code>的安装位置为<code>D:\Scoop</code>，在这个文件夹下，会有这几个子目录：</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://img.foolishfox.cn/images/2021/01/scoopdir.png"  alt="" />      </p><p>  <code>app</code>就是软件的安装位置；<code>buckets</code>则是已添加的仓库（后文会提到，<code>scoop</code>的仓库实际上就是<code>git</code>的<code>repository</code>，所以该文件夹下其实就是一个一个<code>git repository</code>）；<code>cache</code>是下载缓存；<code>GlobalApps</code>是自定义的全局安装位置；<code>persist</code>则是一些配置文件；<code>shim</code>会创建一些应用的软链接，让应用之间不会互相干扰。</p>        <h3 id="加速"   >          <a href="#加速" class="heading-link"><i class="fas fa-link"></i></a>加速</h3>              <h4 id="使用aria2"   >          <a href="#使用aria2" class="heading-link"><i class="fas fa-link"></i></a>使用aria2</h4>      <p>  <code>aria2</code>可以利用多线程加速下载：</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scoop install aria2</span><br><span class="line"><span class="comment"># 关闭aria2（默认开启）</span></span><br><span class="line">scoop config aria2<span class="literal">-enabled</span> false</span><br><span class="line"><span class="comment"># 配置aria2 ：重试秒数 单任务最大线程数(最大为16) 同一服务器最大连接数 最小文件分片大小</span></span><br><span class="line">scoop config aria2<span class="literal">-retry</span><span class="literal">-wait</span> <span class="number">4</span></span><br><span class="line">scoop config aria2<span class="operator">-split</span> <span class="number">16</span></span><br><span class="line">scoop config aria2<span class="literal">-max</span><span class="literal">-connection</span><span class="literal">-per</span><span class="literal">-server</span> <span class="number">16</span></span><br><span class="line">scoop config aria2<span class="literal">-min</span><span class="operator">-split</span><span class="literal">-size</span> <span class="number">4</span>M</span><br></pre></td></tr></table></div></figure>        <h4 id="设置代理"   >          <a href="#设置代理" class="heading-link"><i class="fas fa-link"></i></a>设置代理</h4>      <p>  <code>scoop</code>在拉取仓库更新和下载大部分软件时，都需要从国外服务器下载，速度十分感人，因此使用代理可以大大加速下载。有两种方式可以在<code>scoop</code>下载时使用代理：</p><ol><li>在Powershell内设置环境变量：<code>$Env:http_proxy=&quot;http://127.0.0.1:1080&quot;;$Env:https_proxy=&quot;http://127.0.0.1:1080&quot;</code></li><li>更改代理设置：<code>scoop config proxy [username:password@]host:port</code>，具体配置可以查看参考资料[5]</li></ol>        <h2 id="bucket管理"   >          <a href="#bucket管理" class="heading-link"><i class="fas fa-link"></i></a>Bucket管理</h2>              <h3 id="介绍"   >          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a>介绍</h3>      <p>  <code>Bucket</code>其实就是一个<code>git repository</code>，主要组成就是描述如何安装软件的<code>json</code>文件。在安装<code>scoop</code>时已经附带安装<code>main bucket</code>，然后这个仓库的收录标准十分严格：</p><ul><li>主流的开发者工具</li><li>维护中的最新版本的软件</li><li>完整版本的软件</li><li>不可以有GUI</li><li>……</li></ul><p>  这使得我们只能在<code>main</code>中找到部分软件，不可以有<code>GUI</code>这一点使得大部分日常使用软件都无法下载，所以我们需要添加其他仓库，可以使用<code>scoop bucket know</code>查看官方维护的仓库，还可以在<span class="exturl"><a class="exturl__link"   href="https://scoop.netlify.app/buckets/" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>查看较受欢迎的仓库，较完整的仓库列表可以在<span class="exturl"><a class="exturl__link"   href="https://github.com/rasa/scoop-directory/blob/master/by-score.md" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>查看。</p>        <h3 id="管理"   >          <a href="#管理" class="heading-link"><i class="fas fa-link"></i></a>管理</h3>      <p>  官方维护的仓库可以直接添加，例如<code>scoop bucket add extras</code>；对于社区维护的仓库，使用<code>scoop bucket add &lt;name&gt; &lt;url&gt;</code>进行添加，例如<code>scoop bucket add dorado https://github.com/chawyehsu/dorado</code>。<br />  每一次安装和更新软件之前，<code>scoop</code>首先会从<code>github</code>拉取已添加仓库的更新，然后再进行操作。如果碰到不同的仓库中拥有名字相同的软件，可以加上仓库名以示区分，例如<code>scoop install main/git</code>。</p>        <h3 id="建立自己的bucket"   >          <a href="#建立自己的bucket" class="heading-link"><i class="fas fa-link"></i></a>建立自己的bucket</h3>      <p>  参考<span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/165635039" >scoop 进阶 - 建立自己 的Bucket</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="app查询"   >          <a href="#app查询" class="heading-link"><i class="fas fa-link"></i></a>App查询</h2>      <p>  为了在<code>scoop</code>的许多仓库中找到自己需要的软件，可以在<span class="exturl"><a class="exturl__link"   href="https://scoop.netlify.app/apps/" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>查询安装脚本所在的bucket。</p>        <h2 id="qa"   >          <a href="#qa" class="heading-link"><i class="fas fa-link"></i></a>Q&amp;A</h2>      <ul><li>还有其他的包管理工具吗？<br />  有呀，例如<span class="exturl"><a class="exturl__link"   href="https://github.com/microsoft/winget-cli" >winget</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，是由官方推出的推出命令行安装工具，全称<code>windows package manager client</code></li></ul>        <h2 id="仓库"   >          <a href="#仓库" class="heading-link"><i class="fas fa-link"></i></a>仓库</h2>      <div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">简介</th></tr></thead><tbody><tr><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://github.com/chawyehsu/dorado" >dorado</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td style="text-align:center">Yet another bucket for scoop.</td></tr><tr><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://github.com/integzz/scoopet" >scoopet</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td style="text-align:center">A Bucket for the Best Windows Package Manager scoop : Continuously Assisting in Academic Research.</td></tr><tr><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://github.com/kidonng/sushi" >sushi</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td style="text-align:center">A tasty and inclusive scoop bucket, providing various kinds of applications.</td></tr><tr><td style="text-align:center"><span class="exturl"><a class="exturl__link"   href="https://github.com/YiHui-Liu/limpit" >limpit</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td style="text-align:center">我的 scoop 的软件仓库</td></tr></tbody></table></div>        <h2 id="参考资料"   >          <a href="#参考资料" class="heading-link"><i class="fas fa-link"></i></a>参考资料</h2>      <ol><li><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/29e9d40bd7a2" >Windows下最好的包管理器–scoop</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/50993df76b1c" >scoop——强大的Windows命令行包管理工具</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://sspai.com/post/52710" >给 scoop 加上这些软件仓库，让它变成强大的 Windows 软件管理器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/lukesampson/scoop/wiki/Using-scoop-behind-a-proxy" >Using scoop behind a proxy</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/lukesampson/scoop/wiki/Quick-Start" >Quick Start</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://chawyehsu.com/blog/talk-about-scoop-the-package-manager-for-windows-again" >再谈谈 scoop 这个 Windows 下的软件包管理器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/muoyangoren/article/details/79531851" >Aria2下载简述</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;   &gt;
          &lt;a href=&quot;#前言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;前言&lt;/h2&gt;
      
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;  在&lt;code&gt;Ubuntu&lt;/code&gt;安装软件的时候敲入上面的命令是一件令人舒适的事情，而且也很便捷，想要在&lt;code&gt;MacOS&lt;/code&gt;上这样操作，也可以使用&lt;code&gt;homebrew&lt;/code&gt;等诸多的包管理工具。然而如果想在&lt;code&gt;Windows&lt;/code&gt;安装软件，你&lt;strong&gt;可能&lt;/strong&gt;需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开百度搜索软件&lt;/li&gt;
&lt;li&gt;在搜索结果中找到无毒无捆绑的版本&lt;/li&gt;
&lt;li&gt;进行安装，不停点击&lt;code&gt;Next&lt;/code&gt;或者下一步&lt;/li&gt;
&lt;li&gt;结束安装&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://foolishfox.cn/categories/Windows/"/>
    
    
    <category term="安装" scheme="https://foolishfox.cn/tags/%E5%AE%89%E8%A3%85/"/>
    
    <category term="github" scheme="https://foolishfox.cn/tags/github/"/>
    
  </entry>
  
</feed>
